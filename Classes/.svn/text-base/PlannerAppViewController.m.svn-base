//
//  PlannerAppViewController.m
//  PlannerApp
//
//  Created by openxcell tech.. on 2/8/12.
//  Copyright 2012 __MyCompanyName__. All rights reserved.
//

#import "PlannerAppViewController.h"
#import "StatusView.h"
#import "PriorityView.h"

#import "TapView.h"


#import "Settings.h"
static const CGFloat MINIMUM_SCROLL_FRACTION = 0.2;
static const CGFloat MAXIMUM_SCROLL_FRACTION = 0.8;
static const CGFloat KEYBOARD_ANIMATION_DURATION = 0.3;
@implementation PlannerAppViewController

@synthesize table1,table2,view1,view2,view3,view4,taskbutton,workbtn;
@synthesize personalbtn,healthbtn,familybtn,financebtn;
@synthesize taskname,addBtn,popover_tap;
@synthesize tbl2Cell,category_cell;
@synthesize fbGraph,feedPostId;
/*
// The designated initializer. Override to perform setup that is required before the view is loaded.
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}
*/

/*
// Implement loadView to create a view hierarchy programmatically, without using a nib.
- (void)loadView {
}
*/



// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
    [super viewDidLoad];
    array_demo=[[NSMutableArray alloc]init];
    personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	finance_data=FALSE;
	work_data=TRUE;
    share_data=TRUE;
    urgent_data=TRUE;
    shopping_data=TRUE;
    
    appdel=(PlannerAppAppDelegate *)[[UIApplication sharedApplication]delegate ];
    
    /*Facebook Application ID*/
	NSString *client_id = @"130902823636657";
	
	//alloc and initalize our FbGraph instance
	
    /*
    
     
     
     //hi
    self.fbGraph = [[FbGraph alloc] initWithFbClientID:client_id];
	
	//begin the authentication process.....
    [fbGraph authenticateUserWithCallbackObject:self andSelector:@selector(fbGraphCallback:) 
						 andExtendedPermissions:@"user_photos,user_videos,publish_stream,offline_access,user_checkins,friends_checkins"];
     
     
     */
	
	/**
	 * OR you may wish to 'anchor' the login UIWebView to a window not at the root of your application...
	 * for example you may wish it to render/display inside a UITabBar view....
	 *
	 * Feel free to try both methods here, simply (un)comment out the appropriate one.....
	 **/
    //[fbGraph authenticateUserWithCallbackObject:self andSelector:@selector(fbGraphCallback:) andExtendedPermissions:@"user_photos,user_videos,publish_stream,offline_access" andSuperView:self.view];
    	
}

-(void)JSON
{
    NSString *str;
    NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];

    if(work_data == TRUE)
    {
  str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=1&user_id=%@",str_id];
        
    }
    else if(family_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=2&user_id=%@",str_id];
    }
    else if(health_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=3&user_id=%@",str_id];
    }
    else if(personal_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=4&user_id=%@",str_id];
    }
    else if(finance_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=5&user_id=%@",str_id];
    }
    else if(share_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=7&user_id=%@",str_id];
    }

    else if(urgent_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=8&user_id=%@",str_id];
    }

    else if(shopping_data == TRUE)
    {
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=9&user_id=%@",str_id];
    }

    else
    {
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=sub_category&parent_id=1&user_id=%@",str_id];
    }

    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:str]];
    JSONParser *parser = [[JSONParser alloc] initWithRequestForThread:request sel:@selector(searchResult:) andHandler:self];
    NSLog(@"%@",parser);
	
}
-(void)searchResult:(NSDictionary*)dictionary
{
    NSLog(@"%@",dictionary);
    NSMutableArray *arr1=[[NSMutableArray alloc] init];
   arr2=[[NSMutableArray alloc] init];

    NSMutableDictionary *dic2,*dic3,*dic4;
    NSMutableArray *arr=[dictionary valueForKey:@"sub_category_list"];
  
    for(int y=0;y<[arr count];y++)
    {
        dic2=[arr objectAtIndex:y];
        dic3=[dic2 valueForKey:@"title"];
        dic4=[dic2 valueForKey:@"scid"];
        [arr2 addObject:dic4];
        [arr1 addObject:dic3];
     //   txt_category.text=[arr1 objectAtIndex:y];
    }
    NSLog(@"%@",arr2);
    NSLog(@"%@",arr1);
    if(work_data == TRUE)
    {
    work_array=[arr1 copy];
    }
    else if(personal_data == TRUE)
    {
        personal_array=[arr1 copy];
    }
    else if(health_data ==TRUE)
    {
        health_array=[arr1 copy];
    }
    else if(family_data ==TRUE)
    {
        family_array=[arr1 copy];
    }
    else if(finance_data ==TRUE)
    {
        finance_array=[arr1 copy];
    }
    else if(share_data ==TRUE)
    {
        share_array=[arr1 copy];
    }
    else if(urgent_data ==TRUE)
    {
        urgent_array=[arr1 copy];
    }
    else if(shopping_data ==TRUE)
    {
        shop_array=[arr1 copy];
    }

    else
    {
        work_array=[arr1 copy];
    }
    [table1 reloadData]; 

    
}	

-(void)JSON_insertcategory
{
    NSString *str;
    if(work_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=1",txt_category.text,str_id];
    }
    else if(family_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=2",txt_category.text,str_id];
    }
    else if(health_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=3",txt_category.text,str_id];
    }
    else if(personal_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=4",txt_category.text,str_id];   
    }
    else if(finance_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=5",txt_category.text,str_id];
    }
    else if(share_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=7",txt_category.text,str_id];
    }
    
    else if(urgent_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=8",txt_category.text,str_id];
    }
    
    else if(shopping_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=9",txt_category.text,str_id];
    }
    
    else
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=sub_category&title=%@&userid=%@&parent_id=1",txt_category.text,str_id];
    }
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:str]];
    JSONParser *parser = [[JSONParser alloc] initWithRequestForThread:request sel:@selector(searchResultCategory:) andHandler:self];
    NSLog(@"%@",parser);

}

-(void)searchResultCategory:(NSDictionary*)dictionary
{
    NSLog(@"%@",dictionary);
    [self JSON];
}

-(void)JSON_deletecategory
{
    NSString *str;
    if(work_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=1&id=%@",str_id,str_scid];
    }
    else if(family_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=2&id=%@",str_id,str_scid];
    }
    else if(health_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=3&id=%@",str_id,str_scid];
    }
    else if(personal_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=4&id=%@",str_id,str_scid];
    }
    else if(finance_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=5&id=%@",str_id,str_scid];    }
    else if(share_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=7&id=%@",str_id,str_scid];
    }
    
    else if(urgent_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=8&id=%@",str_id,str_scid];
    }
    
    else if(shopping_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=9&id=%@",str_id,str_scid];
    }
    
    else
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/delete_data.php?type=sub_category&userid=%@&parent_id=1&id=%@",str_id,str_scid];
    }
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:str]];
    JSONParser *parser = [[JSONParser alloc] initWithRequestForThread:request sel:@selector(searchResultDelCategory:) andHandler:self];
    NSLog(@"%@",parser);
    

}

-(void)searchResultDelCategory:(NSDictionary*)dictionary
{
    NSLog(@"%@",dictionary);
    [self JSON];
}

-(void)JSON_maintaskInsert
{
    NSString *str;
    if(work_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    else if(family_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
      str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];  
    }
    else if(health_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];

        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    else if(personal_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
       str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    else if(finance_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    else if(share_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
      str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    
    else if(urgent_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
       str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];    }
    
    else if(shopping_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    
    else
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/insert_data.php?type=main_task&title=%@&userid=%@&parent_id=%@",textHeader.text,str_id,str_scid];
    }
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:str]];
    JSONParser *parser = [[JSONParser alloc] initWithRequestForThread:request sel:@selector(searchResultMainTaskIns:) andHandler:self];
    NSLog(@"%@",parser);

    
}

-(void)searchResultMainTaskIns:(NSDictionary*)dictionary
{
    NSLog(@"%@",dictionary);
    [self JSON_maintaskRetrive];
}

-(void)JSON_maintaskRetrive
{
    NSString *str;
    if(work_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    else if(family_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id]; 
    }
    else if(health_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
        
          str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    else if(personal_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    else if(finance_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    else if(share_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    else if(urgent_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    
    else if(shopping_data == TRUE)
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
          str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    
    else
    {
        NSString *str_id = [[NSUserDefaults standardUserDefaults]valueForKey:@"user_id"];
         str=[NSString stringWithFormat:@"http://openxcellaus.info/emainder/retrieve_data.php?type=main_task&parent_id=%@&user_id=%@",str_scid,str_id];
    }
    
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:str]];
    JSONParser *parser = [[JSONParser alloc] initWithRequestForThread:request sel:@selector(searchResultMainTaskRet:) andHandler:self];
    NSLog(@"%@",parser);
}

-(void)searchResultMainTaskRet:(NSDictionary*)dictionary
{
    NSLog(@"%@",dictionary);
    NSMutableArray *arr=[[NSMutableArray alloc]init];
   arr_maintask=[[NSMutableArray alloc]init];
    NSMutableDictionary *dic2,*dic3;
    arr=[dictionary valueForKey:@"main_task_list"];
    for(int y=0;y<[arr count];y++)
    {
        dic2=[arr objectAtIndex:y];
        dic3=[dic2 valueForKey:@"title"];
        //dic4=[dic2 valueForKey:@"scid"];
        //[arr2 addObject:dic4];
        [arr_maintask addObject:dic3];
        //textHeader.text=[arr1 objectAtIndex:y];
    }
    NSLog(@"%@",arr_maintask);
    arrayOfSection=[arr_maintask copy];
    [table2 reloadData];
}



-(void)viewWillAppear:(BOOL)animated
{
    insertFlag=TRUE;
    deleteFlag=FALSE;
    dic_txt=[[NSMutableDictionary alloc]init];
	
    sectionOUt=-1;
    row=0;
    i=-1;
    
    arrayOfSection=[[NSMutableArray alloc]init];
    
	
	
	arr_tag=[[NSMutableArray alloc]init];
    
    
    
	k=0;
	scroll.contentSize=CGSizeMake(0, 500);
    
	
    
	taskbutton.selected=TRUE;
	table1.editing=NO;
	UISearchBar *searchBar = [[UISearchBar alloc] initWithFrame:CGRectZero];
	[searchBar sizeToFit];
	
	//searchBar.delegate = self;
	searchBar.placeholder = @"Search..";
	table2.tableHeaderView = searchBar;
	UISearchBar *sBar = [[UISearchBar alloc] initWithFrame:CGRectZero];
	[sBar sizeToFit];
	
	//searchBar.delegate = self;
	sBar.placeholder = @"Search..";
	table1.tableHeaderView = sBar;
	
	
    //	table1.tableHeaderView = searchBar;
	
	[self JSON];
	
    work_array=[[NSMutableArray alloc] init];
    personal_array=[[NSMutableArray alloc]init];
    family_array=[[NSMutableArray alloc] init];
    health_array=[[NSMutableArray alloc] init];
    finance_array=[[NSMutableArray alloc] init];
    share_array=[[NSMutableArray alloc] init];
    urgent_array=[[NSMutableArray alloc] init];
    shop_array=[[NSMutableArray alloc] init];
//	work_array=[[NSMutableArray alloc] initWithObjects:@"Admin",@"Finance",@"Personnel",@"Sales",nil];
//	personal_array=[[NSMutableArray alloc] initWithObjects:@"Relaxation",@"Vacation",@"Hobbies",@"Educational",@"Spiritual",nil];
//	family_array=[[NSMutableArray alloc]initWithObjects:@"Partner",@"Activities",nil];
//	health_array=[[NSMutableArray alloc]initWithObjects:@"Exercise",@"Nutrition",@"Medical",nil ];
//	finance_array=[[NSMutableArray alloc]initWithObjects:@"Banking",@"Bill Pay",@"Credit Cards",@"Taxes",@"Retirement",@"Saving",nil];
//	
	[table1 reloadData];
	workbtn =[[UIButton alloc] init];
	workbtn.frame=CGRectMake(35, 250, 50, 40);
	[workbtn setTitle:@"Work" forState:UIControlStateNormal];
	[workbtn addTarget:self action:@selector(clickOnWork:) forControlEvents:UIControlEventTouchUpInside];
  
    familybtn = [[UIButton alloc]init];
	familybtn.frame=CGRectMake(30, 310, 90, 40);
	[familybtn setTitle:@"Family" forState:UIControlStateNormal];
	[familybtn addTarget:self action:@selector(clickOnFamily:) forControlEvents:UIControlEventTouchUpInside];

	healthbtn = [[UIButton alloc]init];
	healthbtn.frame=CGRectMake(25, 360, 90, 40);
	[healthbtn setTitle:@"Health" forState:UIControlStateNormal];
	[healthbtn addTarget:self action:@selector(clickOnHealth:) forControlEvents:UIControlEventTouchUpInside];
    
	personalbtn = [[UIButton alloc]init];
	personalbtn.frame=CGRectMake(25, 410, 90, 40);
	[personalbtn setTitle:@"Personal" forState:UIControlStateNormal];
	[personalbtn addTarget:self action:@selector(clickOnPersonal:) forControlEvents:UIControlEventTouchUpInside];
	
	    
	
	
    
	financebtn = [[UIButton alloc]init];
	financebtn.frame=CGRectMake(30, 460, 90, 40);
	[financebtn setTitle:@"Finance" forState:UIControlStateNormal];
	[financebtn addTarget:self action:@selector(clickOnFinance:) forControlEvents:UIControlEventTouchUpInside];
    
    
    sharedbtn = [[UIButton alloc]init];
	sharedbtn.frame=CGRectMake(30, 510, 90, 40);
	[sharedbtn setTitle:@"Share" forState:UIControlStateNormal];
	[sharedbtn addTarget:self action:@selector(clickOnShare:) forControlEvents:UIControlEventTouchUpInside];
   
    
    urgentbtn = [[UIButton alloc]init];
	urgentbtn.frame=CGRectMake(30, 560, 90, 40);
	[urgentbtn setTitle:@"UrgentTask" forState:UIControlStateNormal];
	[urgentbtn addTarget:self action:@selector(clickOnUrgent:) forControlEvents:UIControlEventTouchUpInside];
    
    
    shoppingbtn = [[UIButton alloc]init];
	shoppingbtn.frame=CGRectMake(30, 610, 90, 40);
	[shoppingbtn setTitle:@"Shopping" forState:UIControlStateNormal];
	[shoppingbtn addTarget:self action:@selector(clickOnShop:) forControlEvents:UIControlEventTouchUpInside];
	//donebtn = [[UIButton alloc]init];
    //	donebtn.frame=CGRectMake(30, 580, 90, 40);
    //	[donebtn setTitle:@"Done" forState:UIControlStateNormal];
    //	[donebtn addTarget:self action:@selector(clickOnDone:) forControlEvents:UIControlEventTouchUpInside];
    //

    dictForRows=[[NSMutableDictionary alloc] init];
    dictSection=[[NSMutableDictionary alloc]init];
    dic_image=[[NSMutableDictionary alloc]init];
    dic_priorityimage=[[NSMutableDictionary alloc] init];
    
    [table2 reloadData];


}
- (void)viewDidAppear:(BOOL)animated {
	
	
	
}
- (void)fbGraphCallback:(id)sender {
	
	if ( (fbGraph.accessToken == nil) || ([fbGraph.accessToken length] == 0) ) {
		
		NSLog(@"You pressed the 'cancel' or 'Dont Allow' button, you are NOT logged into Facebook...I require you to be logged in & approve access before you can do anything useful....");
		
		//restart the authentication process.....
		[fbGraph authenticateUserWithCallbackObject:self andSelector:@selector(fbGraphCallback:) 
							 andExtendedPermissions:@"user_photos,user_videos,publish_stream,offline_access,user_checkins,friends_checkins"];
		
	} else {
		//pop a message letting them know most of the info will be dumped in the log
		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Note" message:@"For the simplest code, I've written all output to the 'Debugger Console'." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
		//[alert show];
		[alert release];
		
		NSLog(@"------------>CONGRATULATIONS<------------, You're logged into Facebook...  Your oAuth token is:  %@", fbGraph.accessToken);
        [self getMeButtonPressed];
        
		
	}
	
}
-(void)getMeButtonPressed {
	FbGraphResponse *fb_graph_response = [fbGraph doGraphGet:@"me" withGetVars:nil];
	NSLog(@"getMeButtonPressed:  %@", fb_graph_response.htmlResponse);
    NSArray *arr=[fb_graph_response.htmlResponse componentsSeparatedByString:@":"];
    
  
	NSArray *finalarr=[[arr objectAtIndex:1] componentsSeparatedByString:@","];
   
    appdel.strLoginID=[finalarr objectAtIndex:0];
    NSLog(@"%@",appdel.strLoginID);
    if(finalarr!=nil){
        finalarr=nil;
        [finalarr release];
    }
    if(arr!=nil){
        arr=nil;
        [arr release];
    }
}
#pragma mark IBOutlet
-(IBAction)btninDent:(id)sender{
    
	NSLog(@"%d",index);
    NSLog(@"%d",sectionOUt);
    
    NSString *rowsno=[dictForRows valueForKey:[NSString stringWithFormat:@"%d",sectionOUt]];
    
    
    
    int a=[rowsno intValue];
    a++;
    
    [dictForRows setObject:[NSString stringWithFormat:@"%d",a] forKey:[NSString stringWithFormat:@"%d",sectionOUt]];
    
    
    
    NSLog(@"dict is %@",dic_txt);
    [table2 reloadData];
    
    
}
-(IBAction)btnOutDent:(id)sender{
    NSLog(@"%d",index);
    NSLog(@"%d",sectionOUt);
    
    NSString *rowsno=[dictForRows valueForKey:[NSString stringWithFormat:@"%d",sectionOUt]];
    
    
    int a=[rowsno intValue];
    a++;
    
    [dictForRows setObject:[NSString stringWithFormat:@"%d",a] forKey:[NSString stringWithFormat:@"%d",sectionOUt]];
    
    NSMutableArray *tempArr=[[NSMutableArray alloc] init];
    NSLog(@"dict is %@",dic_txt);
    for(int m=0;m<a-1;m++){
        NSString *str=[dic_txt valueForKey:[NSString stringWithFormat:@"%d^%d",sectionOUt,m]];
        if(str==nil){
            [tempArr addObject:@""];
        }
        else
            [tempArr addObject:str];
        
        
    }
    
    for(int m=0;m<a-1;m++){
        [dic_txt setObject:[tempArr objectAtIndex:m] forKey:[NSString stringWithFormat:@"%d^%d",sectionOUt,m+1]];
    }
    [dic_txt setObject:@"" forKey:[NSString stringWithFormat:@"%d^0",sectionOUt]];
    
    NSMutableArray *temp=[[NSMutableArray alloc] init];
    NSLog(@"dict is %@",dic_image);
    for(int m=0;m<a-1;m++){
       NSData *data=[dic_image valueForKey:[NSString stringWithFormat:@"%d%d",m,sectionOUt]];
        if(data==nil){
            [temp addObject:@""];
        }
        else
            [temp addObject:data];
        
        
    }
    
    for(int m=0;m<a-1;m++){
        [dic_image setObject:[temp objectAtIndex:m] forKey:[NSString stringWithFormat:@"%d%d",m+1,sectionOUt]];
    }
    [dic_image setObject:@"" forKey:[NSString stringWithFormat:@"0%d",sectionOUt]];
    NSLog(@"%@",dic_image);
    
    NSMutableArray *temp_pri=[[NSMutableArray alloc] init];
    NSLog(@"dict is %@",dic_priorityimage);
    for(int m=0;m<a-1;m++){
        NSData *data_pri=[dic_priorityimage valueForKey:[NSString stringWithFormat:@"%d%d",m,sectionOUt]];
        if(data_pri==nil){
            [temp_pri addObject:@""];
        }
        else
            [temp_pri addObject:data_pri];
        
        
    }
    
    for(int m=0;m<a-1;m++){
        [dic_priorityimage setObject:[temp_pri objectAtIndex:m] forKey:[NSString stringWithFormat:@"%d%d",m+1,sectionOUt]];
    }
    [dic_priorityimage setObject:@"" forKey:[NSString stringWithFormat:@"0%d",sectionOUt]];
    [table2 reloadData];
}
-(IBAction)btnAdd:(id)sender{
	
	[arr_tag addObject:[NSString stringWithFormat:@"%d",0]];
    //[self JSON_maintaskInsert];
   // [self JSON_maintaskRetrive];
    i++;

    //[dict setObject:@"main" forKey:[NSString stringWithFormat:@"%d",i]];
    [dictForRows setObject:[NSString stringWithFormat:@"%d",row] forKey:[NSString stringWithFormat:@"%d",i]];
    
    [table2 reloadData];
}

-(IBAction)taskbuttonClicked:(id)sender
{
	if(taskbutton.selected == TRUE)
	{
	taskbutton.selected = FALSE;
	//taskbutton.hidden=TRUE;
	//donebtn.hidden=FALSE;
        
    sharedbtn.hidden=FALSE;
    urgentbtn.hidden=FALSE;
        shoppingbtn.hidden=FALSE;
	workbtn.hidden=FALSE;
	personalbtn.hidden=FALSE;
	familybtn.hidden=FALSE;
	healthbtn.hidden=FALSE;
	financebtn.hidden=FALSE;
	[UIView beginAnimations:nil context:nil];
	[UIView setAnimationDuration:0.5];
	[UIView setAnimationDelegate:self];
	//[UIView setAnimationTransition:UIViewAnimationTransitionFlipFromRight forView:view3 cache:YES];
	view3.frame=CGRectMake(650, 0, 128, 1024);
	//workbtn=[[UIButton alloc]initWithFrame:CGRectMake(725,290, 20, 40)];
	
	[view3 addSubview:workbtn];
	[view3 addSubview:personalbtn];
	[view3 addSubview:familybtn];
	[view3 addSubview:healthbtn];
	[view3 addSubview:financebtn];
    [view3 addSubview:sharedbtn];
    [view3 addSubview:urgentbtn];
        [view3 addSubview:shoppingbtn];    
	//[view3 addSubview:donebtn];
	//[view4 removeFromSuperview];
	[UIView commitAnimations];
	}
	else if(taskbutton.selected == FALSE)
	{
		taskbutton.selected = TRUE;
		taskbutton.hidden=FALSE;
		[UIView beginAnimations:nil context:nil];
		[UIView setAnimationDuration:0.5];
		[UIView setAnimationDelegate:self];
		
		//donebtn.hidden=TRUE;
        sharedbtn.hidden=TRUE;
        urgentbtn.hidden=TRUE;
        shoppingbtn.hidden=TRUE;
		workbtn.hidden=TRUE;
		personalbtn.hidden=TRUE;
		familybtn.hidden=TRUE;
		healthbtn.hidden=TRUE;
		financebtn.hidden=TRUE;
		view3.frame=CGRectMake(718, 0, 43, 1024);
		[UIView commitAnimations];
		
	}
	
}
-(IBAction)clickOnWork:(id)sender
{
	personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	finance_data=FALSE;
	work_data=TRUE;
    [self JSON];
	//[table1 reloadData];
}

-(IBAction)clickOnPersonal:(id)sender
{
	//personal_data=FALSE;
	work_data=FALSE;

	family_data=FALSE;
	health_data=FALSE;
	finance_data=FALSE;
	personal_data=TRUE;
    [self JSON];

	//[table1 reloadData];
}


-(IBAction)clickOnFamily:(id)sender
{
	work_data=FALSE;

	personal_data=FALSE;
	//family_data=FALSE;
	health_data=FALSE;
	finance_data=FALSE;
	family_data=TRUE;
    [self JSON];

//	[table1 reloadData];
}


-(IBAction)clickOnHealth:(id)sender
{
	work_data=FALSE;

	personal_data=FALSE;
	family_data=FALSE;
	//health_data=FALSE;
	finance_data=FALSE;
	health_data=TRUE;
    [self JSON];

//	[table1 reloadData];
}

-(IBAction)clickOnFinance:(id)sender
{
	work_data=FALSE;

	personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	//finance_data=FALSE;
	finance_data=TRUE;
    [self JSON];

//	[table1 reloadData];
}

-(IBAction)clickOnShare:(id)sender
{
    work_data=FALSE;
    
	personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	//finance_data=FALSE;
	finance_data=FALSE;
    share_data=TRUE;
    shopping_data=FALSE;
    urgent_data=FALSE;
    [self JSON];
    
//	[table1 reloadData];
}
-(IBAction)clickOnUrgent:(id)sender
{
    work_data=FALSE;
    
	personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	//finance_data=FALSE;
	finance_data=FALSE;
    share_data=FALSE;
    shopping_data=FALSE;
    urgent_data=TRUE;
    [self JSON];
    
//	[table1 reloadData];
}
-(IBAction)clickOnShop:(id)sender
{
    work_data=FALSE;
    
	personal_data=FALSE;
	family_data=FALSE;
	health_data=FALSE;
	//finance_data=FALSE;
	finance_data=FALSE;
    share_data=FALSE;
    shopping_data=TRUE;
    urgent_data=FALSE;
    [self JSON];
    
//	[table1 reloadData];
}
/*
-(IBAction)clickOnDone:(id)sender
{
	taskbutton.hidden=FALSE;
	[UIView beginAnimations:nil context:nil];
	[UIView setAnimationDuration:0.5];
	[UIView setAnimationDelegate:self];
	
	donebtn.hidden=TRUE;
	workbtn.hidden=TRUE;
	personalbtn.hidden=TRUE;
	familybtn.hidden=TRUE;
	healthbtn.hidden=TRUE;
	financebtn.hidden=TRUE;
	view3.frame=CGRectMake(718, 0, 43, 1024);
    [UIView commitAnimations];
}
*/



-(IBAction)clickOnstatusBtn:(id)sender event:(id)event
{
	UITableViewCell *clickedCell = (UITableViewCell *)[[sender superview] superview];
	NSIndexPath *clickedButtonPath = [table2 indexPathForCell:clickedCell];
	int rows=clickedButtonPath.row;
    int section1=clickedButtonPath.section;
    NSString *str_tag=[NSString stringWithFormat:@"%d%d",rows,section1];
   // int row1=[str_tag intValue];
	//NSLog(@"Row %d",row1);
	//statusBtn.tag=row1;
//	NSString *str_row=[NSString stringWithFormat:@"%d",row1];
	[[NSUserDefaults standardUserDefaults] setValue:str_tag forKey:@"str_tag"];
	[[NSUserDefaults standardUserDefaults] synchronize];
	
	
		btn=(UIButton *)sender;
	

	if(!isStatus) {
        StatusView *status = [[StatusView alloc] initWithNibName:@"StatusView" bundle:nil];
		[status setParent:self];
        
        popover = [[UIPopoverController alloc] initWithContentViewController:status];
        popover.delegate = self;
	//	NSLog(@"%d",i);
//if(i == 1)
        
        NSSet *touches = [event allTouches];
        UITouch *touch = [touches anyObject];
        CGPoint currentTouchPosition = [touch locationInView:self.view];
		
		[popover presentPopoverFromRect:CGRectMake(currentTouchPosition.x,currentTouchPosition.y-20,100,100) inView:self.view permittedArrowDirections:UIPopoverArrowDirectionRight animated:YES];
		
		
				
		isStatus = YES;
        [[NSNotificationCenter defaultCenter] 
         addObserver:self
         selector:@selector(dismissPopOverViewHome:)
         name:@"dismissPopOverViewHome"
         object:popover.contentViewController];
            }
    else
    {
        [popover dismissPopoverAnimated:YES];
        isStatus = NO;
    }
   	
}

-(IBAction)clickOnSettings:(id)sender{
    Settings *objSettings=[[Settings alloc]initWithNibName:@"Settings" bundle:nil];
    [self.navigationController pushViewController:objSettings animated:YES];
    [objSettings release];
}

-(IBAction)clickOnSync:(id)sender
{
	SyncView *sync=[[SyncView alloc]initWithNibName:@"SyncView" bundle:nil];
	popover_sync = [[UIPopoverController alloc] initWithContentViewController:sync];
	
	popover_sync.delegate = self;

	[popover_sync presentPopoverFromRect:CGRectMake(280,930,100, 100) inView:self.view permittedArrowDirections:UIPopoverArrowDirectionDown animated:YES];
}

-(IBAction)clickOnProgress:(id)sender
{
    ProgressViewController *progress=[[ProgressViewController alloc] initWithNibName:@"ProgressViewController" bundle:nil];
    [self.navigationController pushViewController:progress animated:YES];
	
    [progress release];
}
-(IBAction)clickOnInfo:(id)sender
{
    InfoViewController *objInfo=[[InfoViewController alloc]initWithNibName:@"InfoViewController" bundle:nil];
    [self.navigationController pushViewController:objInfo animated:YES];
    [objInfo release];
}
-(IBAction)clickOnMail:(id)sender
{
	mail=[[MFMailComposeViewController alloc]init];
	mail.mailComposeDelegate=self;
	[mail setToRecipients:[NSArray arrayWithObjects:@"email@email.com",nil]];
	NSString *str=[NSString stringWithFormat:@"hello"];
	[mail setSubject:str];
	[mail setMessageBody:@"Message of email" isHTML:YES];
	[self presentModalViewController:mail animated:YES];
	//self.view=firstResponder;
	[mail resignFirstResponder];
	[mail respondsToSelector:@selector(set:)];
	[mail release];
	
}
	
- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error 
	{   
		// Notifies users about errors associated with the interface
		switch (result)
		{
			case MFMailComposeResultCancelled:
				NSLog(@"Result: canceled");
				break;
			case MFMailComposeResultSaved:
				NSLog(@"Result: saved");
				break;
			case MFMailComposeResultSent:
			{
				UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Result" message:@"Mail Sent Successfully" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
				[alert show];
				[alert release];
			}
				break;
			case MFMailComposeResultFailed:
				NSLog(@"Result: failed");
				break;
			default:
			NSLog(@"Result: not sent");
				break;
		}
		[self dismissModalViewControllerAnimated:YES];
	}
	

-(IBAction)changeSegment
{
	if(segment.selectedSegmentIndex == 0)
	{
		table1.hidden= FALSE;
		[table1 reloadData];
		scroll.hidden= TRUE;
		view_cal.hidden = TRUE;
        editBtn.enabled=TRUE;
	}
	else if(segment.selectedSegmentIndex == 1)
	{
		table1.hidden = TRUE;
		scroll.hidden = FALSE;
		view_cal.hidden = FALSE;
		scroll.delegate=self;
        editBtn.enabled=FALSE;
		[self.view addSubview:view_cal];
		[self.view addSubview:scroll];
	
		NSDate *yourDate=[NSDate date];
		
		float s=7000;
		float h=0;
		float heightSC=0;
		for(int m=0;m<=11;m++){
			TKCalendarMonthView *calendar1=[[TKCalendarMonthView alloc] init];
			calendar1.delegate = self;
			calendar1.dataSource = self;
			
			NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
			NSDateComponents *todayComponents = [gregorian components:(NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit) fromDate:yourDate];
			NSInteger theDay = [todayComponents day];
			NSInteger theMonth = [todayComponents month];
			NSInteger theYear = [todayComponents year];
			
			// now build a NSDate object for yourDate using these components
			NSDateComponents *components = [[NSDateComponents alloc] init];
			[components setDay:theDay]; 
			[components setMonth:theMonth]; 
			[components setYear:theYear];
			NSDate *thisDate = [gregorian dateFromComponents:components];
			[components release];
			h=calendar1.frame.size.height;
			// now build a NSDate object for the next day
			NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
			[offsetComponents setMonth:-1];
			NSDate *nextDate = [gregorian dateByAddingComponents:offsetComponents toDate:thisDate options:0];
			//NSLog(@"%@",nextDate);
			[calendar1 selectDate:nextDate];
			s=s-calendar1.frame.size.height;
			UIView *view_c=[[UIView alloc]initWithFrame:CGRectMake(0, s, 272, calendar1.frame.size.height)];
			//NSLog(@"view start is %@",view_c);
			//[self.view addSubview:scroll];
			//[view2 addSubview:calendar1];
			//[scroll addSubview:view2];
			
			//NSLog(@"height is %f",calendar1.frame.size.height);
			
			//NSLog(@"s is %f",s);
			
			
			yourDate=nextDate;
			CGPoint currentOff = scroll.contentOffset;
			currentOff.y+=3250*m;
			[scroll setContentOffset:currentOff animated: YES];
			scroll.contentSize=CGSizeMake(150, 300+(300*m));
			
			
			[view_c release];
			[calendar1 release];
			
			heightSC=heightSC+calendar1.frame.size.height;
			
		}
		//NSLog(@"hellop %f",heightSC);
		yourDate=[NSDate date];
		s=3244;
		for(int m=11;m>=0;m--){
			TKCalendarMonthView *calendar1=[[TKCalendarMonthView alloc] init];
			calendar1.delegate = self;
			calendar1.dataSource = self;
			
			NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
			NSDateComponents *todayComponents = [gregorian components:(NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit) fromDate:yourDate];
			NSInteger theDay = [todayComponents day];
			NSInteger theMonth = [todayComponents month];
			NSInteger theYear = [todayComponents year];
			
			// now build a NSDate object for yourDate using these components
			NSDateComponents *components = [[NSDateComponents alloc] init];
			[components setDay:theDay]; 
			[components setMonth:theMonth]; 
			[components setYear:theYear];
			NSDate *thisDate = [gregorian dateFromComponents:components];
			[components release];
			h=calendar1.frame.size.height;
			// now build a NSDate object for the next day
			NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
			[offsetComponents setMonth:-1];
			NSDate *nextDate = [gregorian dateByAddingComponents:offsetComponents toDate:thisDate options:0];
			//NSLog(@"%@",nextDate);
			[calendar1 selectDate:nextDate];
			s=s-calendar1.frame.size.height;
			UIView *view_c=[[UIView alloc]initWithFrame:CGRectMake(0, s, 272, calendar1.frame.size.height
																  )];
			//NSLog(@"view start is %@",view_c);
			[self.view addSubview:scroll];
			[view_c addSubview:calendar1];
			[scroll addSubview:view_c];
			
			//NSLog(@"height is %f",calendar1.frame.size.height);
			
			//NSLog(@"s is %f",s);
			
			
			yourDate=nextDate;
			CGPoint currentOff = scroll.contentOffset;
			currentOff.y+=3250*m;
			[scroll setContentOffset:currentOff animated: YES];
			scroll.contentSize=CGSizeMake(150, 300+(300*m));
			
			[view_c release];
			[calendar1 release];
			
		}
		
		//NSLog(@"s out is %f",s);
		yourDate=[NSDate date];
		s=3244;
		for(int m=11;m<=23;m++){
			TKCalendarMonthView *calendar1=[[TKCalendarMonthView alloc] init];
			calendar1.delegate = self;
			calendar1.dataSource = self;
			
			NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
			NSDateComponents *todayComponents = [gregorian components:(NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit) fromDate:yourDate];
			NSInteger theDay = [todayComponents day];
			NSInteger theMonth = [todayComponents month];
			NSInteger theYear = [todayComponents year];
			
			// now build a NSDate object for yourDate using these components
			NSDateComponents *components = [[NSDateComponents alloc] init];
			[components setDay:theDay]; 
			[components setMonth:theMonth]; 
			[components setYear:theYear];
			NSDate *thisDate = [gregorian dateFromComponents:components];
			[components release];
			
			// now build a NSDate object for the next day
			NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
			[offsetComponents setMonth:1];
			NSDate *nextDate = [gregorian dateByAddingComponents:offsetComponents toDate:thisDate options:0];
			//NSLog(@"%@",nextDate);
			if(m==11){
				nextDate=yourDate;
                [scroll setContentOffset:CGPointMake(0, s) animated:YES];

				//s=s+calendar1.frame.size.height;
			}
			[calendar1 selectDate:nextDate];
			
			UIView *view_c=[[UIView alloc]initWithFrame:CGRectMake(0, s, 272, calendar1.frame.size.height
																  )]; 
			
            
			s=s+calendar1.frame.size.height;
			
			
			//NSLog(@"calendar is %@",calendar1);
			//NSLog(@"view in 2 is %@",view_c);
			[self.view addSubview:view_c];
			[scroll addSubview:view_c];
			[view_c addSubview:calendar1];
			
			yourDate=nextDate;
			
			scroll.contentSize=CGSizeMake(150, 300+(300*m));
			[view_c release];
			[calendar1 release];
			
		}
		scroll.contentSize=CGSizeMake(150, 7000);
	}
}
#pragma mark -
#pragma mark TKCalendarMonthViewDelegate methods

- (void)calendarMonthView:(TKCalendarMonthView *)monthView didSelectDate:(NSDate *)d {
	NSLog(@"d is %@",d);
    
}

- (void)calendarMonthView:(TKCalendarMonthView *)monthView monthDidChange:(NSDate *)d {
	NSLog(@"calendarMonthView monthDidChange");	
}

#pragma mark -
#pragma mark TKCalendarMonthViewDataSource methods

- (NSArray*)calendarMonthView:(TKCalendarMonthView *)monthView marksFromDate:(NSDate *)startDate toDate:(NSDate *)lastDate {	
	//NSLog(@"calendarMonthView marksFromDate toDate");	
	//NSLog(@"Make sure to update 'data' variable to pull from CoreData, website, User Defaults, or some other source.");
	// When testing initially you will have to update the dates in this array so they are visible at the
	// time frame you are testing the code.
	NSArray *data = [NSArray arrayWithObjects:
					 @"2011-01-01 00:00:00 +0000", @"2011-01-09 00:00:00 +0000", @"2011-01-22 00:00:00 +0000",
					 @"2011-01-10 00:00:00 +0000", @"2011-01-11 00:00:00 +0000", @"2011-01-12 00:00:00 +0000",
					 @"2011-01-15 00:00:00 +0000", @"2011-01-28 00:00:00 +0000", @"2011-01-04 00:00:00 +0000",					 
					 @"2011-01-16 00:00:00 +0000", @"2011-01-18 00:00:00 +0000", @"2011-01-19 00:00:00 +0000",					 
					 @"2011-01-23 00:00:00 +0000", @"2011-01-24 00:00:00 +0000", @"2011-01-25 00:00:00 +0000",					 					 
					 @"2011-02-01 00:00:00 +0000", @"2011-03-01 00:00:00 +0000", @"2011-04-01 00:00:00 +0000",
					 @"2011-05-01 00:00:00 +0000", @"2011-06-01 00:00:00 +0000", @"2011-07-01 00:00:00 +0000",
					 @"2011-08-01 00:00:00 +0000", @"2011-09-01 00:00:00 +0000", @"2011-10-01 00:00:00 +0000",
					 @"2011-11-01 00:00:00 +0000", @"2011-12-01 00:00:00 +0000", nil]; 
	
	
	// Initialise empty marks array, this will be populated with TRUE/FALSE in order for each day a marker should be placed on.
	NSMutableArray *marks = [NSMutableArray array];
	
	// Initialise calendar to current type and set the timezone to never have daylight saving
	NSCalendar *cal = [NSCalendar currentCalendar];
	[cal setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
	
	// Construct DateComponents based on startDate so the iterating date can be created.
	// Its massively important to do this assigning via the NSCalendar and NSDateComponents because of daylight saving has been removed 
	// with the timezone that was set above. If you just used "startDate" directly (ie, NSDate *date = startDate;) as the first 
	// iterating date then times would go up and down based on daylight savings.
	NSDateComponents *comp = [cal components:(NSMonthCalendarUnit | NSMinuteCalendarUnit | NSYearCalendarUnit | 
											  NSDayCalendarUnit | NSWeekdayCalendarUnit | NSHourCalendarUnit | NSSecondCalendarUnit) 
									fromDate:startDate];
	NSDate *d = [cal dateFromComponents:comp];
	
	// Init offset components to increment days in the loop by one each time
	NSDateComponents *offsetComponents = [[NSDateComponents alloc] init];
	[offsetComponents setDay:1];	
	
	
	// for each date between start date and end date check if they exist in the data array
	while (YES) {
		// Is the date beyond the last date? If so, exit the loop.
		// NSOrderedDescending = the left value is greater than the right
		if ([d compare:lastDate] == NSOrderedDescending) {
			break;
		}
		
		// If the date is in the data array, add it to the marks array, else don't
		if ([data containsObject:[d description]]) {
			[marks addObject:[NSNumber numberWithBool:NO]];
		} else {
			[marks addObject:[NSNumber numberWithBool:NO]];
		}
		
		// Increment day using offset components (ie, 1 day in this instance)
		d = [cal dateByAddingComponents:offsetComponents toDate:d options:0];
	}
	
	[offsetComponents release];
	
	return [NSArray arrayWithArray:marks];
}



#pragma mark popover
-(void)dismissPopOverViewHome:(id)sender
{
    [popover dismissPopoverAnimated:YES];
    isStatus = NO;
}

-(void)dismissPopOverViewHome2:(id)sender
{
    [popover2 dismissPopoverAnimated:YES];
    isPriority = NO;
}


- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
	if(popoverController == popover)
	{
    if(!isStatus) {
        isStatus = YES;
    }
    else {
        isStatus = NO;
    }
	}
	else if(popoverController == popover2){
		if(!isPriority) {
			isPriority = YES;
		}
		else {
			isPriority = NO;
		}
		
	}
	else if(popoverController == popover_tap)
	{
		if(!isTap) {
			isTap = YES;
		}
		else {
			isTap = NO;
		}
		
	}

}

-(IBAction)clickOnpriorityBtn:(id)sender event:(id)event
{
    UITableViewCell *clickedCell = (UITableViewCell *)[[sender superview] superview];
	NSIndexPath *clickedButtonPath = [table2 indexPathForCell:clickedCell];
	int rows=clickedButtonPath.row;
    int section1=clickedButtonPath.section;
    NSString *strtag=[NSString stringWithFormat:@"%d%d",rows,section1];
    // int row1=[str_tag intValue];
	//NSLog(@"Row %d",row1);
	//statusBtn.tag=row1;
    //	NSString *str_row=[NSString stringWithFormat:@"%d",row1];
	[[NSUserDefaults standardUserDefaults] setValue:strtag forKey:@"strtag"];
	[[NSUserDefaults standardUserDefaults] synchronize];

    btnpriority=(UIButton *)sender;

	if(!isPriority) {
        PriorityView *priority = [[PriorityView alloc] initWithNibName:@"PriorityView" bundle:nil];
        [priority setParent:self];

        popover2 = [[UIPopoverController alloc] initWithContentViewController:priority];
        popover2.delegate = self;
		//NSLog(@"%d",i);
        NSSet *touches = [event allTouches];
        UITouch *touch = [touches anyObject];
        CGPoint currentTouchPosition = [touch locationInView:self.view];
        [popover2 presentPopoverFromRect:CGRectMake(currentTouchPosition.x-80,currentTouchPosition.y-20,100,100) inView:self.view permittedArrowDirections:UIPopoverArrowDirectionLeft animated:YES];
			isPriority = YES;
        [[NSNotificationCenter defaultCenter] 
         addObserver:self
         selector:@selector(dismissPopOverViewHome2:)
         name:@"dismissPopOverViewHome2"
         object:popover2.contentViewController];
    }
    else
    {
        [popover2 dismissPopoverAnimated:YES];
        isPriority = NO;
    }
	
}
- (BOOL)popoverControllerShouldDismissPopover:(UIPopoverController *)popoverController
{
	return YES;
}

-(void)CallMethod:(UIImage *)image
{
	
	NSLog(@"%d",btn.tag);
    NSData* pictureData = UIImagePNGRepresentation(image);
//    NSString* pictureDataString = [[NSString alloc] initWithData:pictureData encoding:NSUnicodeStringEncoding];
//
    NSString *strim=[[NSUserDefaults standardUserDefaults]valueForKey:@"str_tag"];
    [dic_image setObject:pictureData forKey:strim];
    NSLog(@"%@",dic_image);
	//[btn setImage:image forState:UIControlStateNormal];
    [table2 reloadData];
}

-(void)CallMethodPriority:(UIImage *)image
{
  //  [priorityBtn setImage:image forState:UIControlStateNormal];
    NSData *pictureData=UIImagePNGRepresentation(image);
    NSString *strim=[[NSUserDefaults standardUserDefaults]valueForKey:@"strtag"];
    [dic_priorityimage setObject:pictureData forKey:strim];
    NSLog(@"%@",dic_priorityimage);
    [table2 reloadData];
}

-(IBAction)clickOnEditBtn:(id)sender
{
	if(self.editing)
	{ 
        if(deleteFlag == FALSE)
        {
        if(insertFlag == FALSE)
        {
            NSLog(@"nothing");
        }
        else if(insertFlag == TRUE)
        {
            [self JSON_insertcategory];
        }
        }
        else
        {
            NSLog(@"nothing");
        }
		[super setEditing:NO animated:NO]; 
		[self.table1 setEditing:NO animated:NO];
		[self.table1 reloadData];
		[editBtn setTitle:@"Edit" forState:UIControlStateNormal];
	}
	else
	{
        //[self JSON];
        
		[super setEditing:YES animated:YES]; 
		[self.table1 setEditing:YES animated:YES];
		[self.table1 reloadData];
		[editBtn setTitle:@"Done" forState:UIControlStateNormal];
	}
}
#pragma mark gesture recognizer
//-(void)tap
- (IBAction)tapDetected:(UIGestureRecognizer *)sender 
{
	
	CGPoint p = [sender locationInView:table2];
	
    NSIndexPath *indexPath = [self.table2 indexPathForRowAtPoint:p];
	NSLog(@"%d",indexPath.row);
	if(indexPath == nil)
	{
		NSLog(@"empty");
	}
	else {
		
	if(!isTap) {
        TapView *tap= [[TapView alloc] initWithNibName:@"TapView" bundle:nil];
	//	UIButton *doneButton = [[UIButton alloc]init ];
		//[doneButton addTarget:self action:@selector(hidePopView:) forControlEvents:UIControlEventTouchUpInside];
		UIBarButtonItem *doneButton=[[UIBarButtonItem alloc]initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(hidePopView:)];
									 
		
		[tap.navigationItem setRightBarButtonItem:doneButton];
		
		UIBarButtonItem *cancelButton=[[UIBarButtonItem alloc]initWithTitle:@"Cancel" 
																	  style:UIBarButtonItemStyleBordered
																	 target:self action:@selector(hidePopView:)];
		[tap.navigationItem setLeftBarButtonItem:cancelButton];
		
		UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:tap];
        popover_tap = [[UIPopoverController alloc] initWithContentViewController:navController];
        popover_tap.delegate = self;
		
        
        [popover_tap presentPopoverFromRect:CGRectMake(300,50,300,320) inView:self.view permittedArrowDirections:UIPopoverArrowDirectionRight animated:YES];
		
		
		
	
	//		[popover_tap dismissPopoverAnimated:YES];
	
	
		isTap = YES;
        [[NSNotificationCenter defaultCenter] 
         addObserver:self
         selector:@selector(dismissPopOverViewHome3:)
         name:@"dismissPopOverViewHome"
         object:popover_tap.contentViewController];
    }
    else
    {
        [popover_tap dismissPopoverAnimated:YES];
        isTap = NO;
    }
	}
}
-(IBAction)hidePopView:(id)sender
{
	[popover_tap dismissPopoverAnimated:YES];
}

-(void)dismissPopOverViewHome3:(id)sender
{
    [popover_tap dismissPopoverAnimated:YES];
    isTap = NO;
}
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}
- (void)textFieldDidBeginEditing:(UITextField*)textField
{
    CGRect textFieldRect =[self.view.window convertRect:textField.bounds fromView:textField];
    CGRect viewRect =[self.view.window convertRect:self.view.bounds fromView:self.view];
    CGFloat midline = textFieldRect.origin.y + 1.0 * textFieldRect.size.height;
    CGFloat numerator =midline - viewRect.origin.y- MINIMUM_SCROLL_FRACTION * viewRect.size.height;
    CGFloat denominator =(MAXIMUM_SCROLL_FRACTION - MINIMUM_SCROLL_FRACTION)* viewRect.size.height;
    CGFloat heightFraction = numerator / denominator;
    animatedDistance = floor(162.0 * heightFraction);
    CGRect viewFrame = self.view.frame;
    viewFrame.origin.y -= animatedDistance;
    [UIView beginAnimations:nil context:NULL];
    [UIView setAnimationBeginsFromCurrentState:YES];
    [UIView setAnimationDuration:KEYBOARD_ANIMATION_DURATION];
    [self.view setFrame:viewFrame];
    [UIView commitAnimations];
}

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    CGRect viewFrame = self.view.frame;
    viewFrame.origin.y += animatedDistance;
    [UIView beginAnimations:nil context:NULL];
    [UIView setAnimationBeginsFromCurrentState:YES];
    [UIView setAnimationDuration:KEYBOARD_ANIMATION_DURATION];
    [self.view setFrame:viewFrame];
    [UIView commitAnimations];
}


- (IBAction)devTyping:(UITextField*)sender   {
    NSLog(@"The user is typing in text field %d",sender.tag );
    NSLog(@"%@",txt.text);
    UITextField *newTxt=(UITextField *)sender;
    [txt resignFirstResponder];
	NSString *str=[NSString stringWithFormat:@"%@",newTxt.text];
	NSLog(@"text is:%@",str);
	
    NSLog(@"Dictionary is: %@",dic_txt);
    NSIndexPath *indexPath1;
    UITableViewCell *cell = (UITableViewCell *)[[newTxt superview] superview];
    
    indexPath1=[table2 indexPathForCell:cell];
    
    sectioncell=indexPath1.section;
    rowcell=indexPath1.row;
    NSLog(@"section is %d & index row is %d",sectioncell,rowcell);
    NSString *contents=@"";
    contents=[contents stringByAppendingString:[NSString stringWithFormat:@"%d",sectioncell]];
    contents=[contents stringByAppendingString:[NSString stringWithFormat:@"^%d",rowcell]];
    
    
    [dic_txt setObject:str forKey:contents]; 
    
    NSLog(@"dict of contents is %@",dic_txt);
    
    [table2 reloadData];
}
-(IBAction)textHeaderEnd:(UITextField *)sender{
    UITextField *newTxt=(UITextField *)sender;
    [newTxt resignFirstResponder];
    NSString *str=[NSString stringWithFormat:@"%@",newTxt.text];
    int a=newTxt.tag-1;
    NSLog(@"text feild tag is %d",a);
    [dictSection setObject:str forKey:[NSString stringWithFormat:@"%d",a]];
    NSLog(@"%@",dictSection);
    [self JSON_maintaskInsert];
    [table2 reloadData];
}


- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    return  44;
}
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    if(tableView == table2)
    {
        return 44;
    }
    else if(tableView == table1)
    {
        return 0;
    }
    
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    if(tableView == table2)
    {
    UIView *headerView=[[UIView alloc]initWithFrame:CGRectMake(0, 0, 323, 44)];
    UIButton *button=[UIButton buttonWithType:UIButtonTypeCustom];
    button.frame=CGRectMake(0, 7, 30, 30);
    button.tag=section+1;
	UIButton *backButton=[UIButton buttonWithType:UIButtonTypeCustom];
    backButton.frame=headerView.frame;
    [backButton addTarget:self action:@selector(getSection:) forControlEvents:UIControlEventTouchUpInside];
    backButton.tag=section+1;
    [backButton setSelected:YES];
    [backButton setFrame:CGRectMake(100, 0, 310, 44)];
    [backButton setImage:[UIImage imageNamed:@"sectionBg.png"] forState:UIControlStateNormal];
    
        UIButton *status_btn= [UIButton buttonWithType:UIButtonTypeRoundedRect];
        status_btn.frame=CGRectMake(20,7 , 35, 35);
        [headerView addSubview:status_btn];    
        
        UIButton *priority_btn=[UIButton buttonWithType:UIButtonTypeRoundedRect];
        priority_btn.frame=CGRectMake(60, 7, 35, 35);
        [headerView addSubview:priority_btn];
        
    textHeader=[[UITextField alloc] initWithFrame:CGRectMake(100, 5, 100, 44)];
    textHeader.delegate=self;
    [textHeader addTarget:self action:@selector(textHeaderEnd:) forControlEvents:UIControlEventEditingDidEnd];
    textHeader.placeholder=@"Write here";
    textHeader.tag=section+1;
    [button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
    NSLog(@"dict of rows %@",dictForRows);
    if([[dictForRows valueForKey:[NSString stringWithFormat:@"%d",section]] intValue]>=1 ){
        [button setImage:[UIImage imageNamed:@"shrink.png"] forState:UIControlStateNormal];
        [button setImage:[UIImage imageNamed:@"disclosure.png"] forState:UIControlStateSelected];
    }
    
    
   // if(![dictSection count]==0 || [textHeader.text isEqualToString:@""] || [textHeader.text isEqualToString:@"(null)"]){
        
    //    NSString *temp=[NSString stringWithFormat:@"%@",[dictSection valueForKey:[NSString stringWithFormat:@"%d",section]]];
        NSString *temp=[NSString stringWithFormat:@"%@",[arrayOfSection objectAtIndex:section]];
        if ([temp isEqualToString:@"(null)"]){
            [textHeader setText:@""];
        }
        else{
            [textHeader setText:temp];
        }
    
    NSLog(@"%@",[dictForRows valueForKey:[NSString stringWithFormat:@"%d",section]]);
        if(![arr_tag count]==0){
    if([[arr_tag objectAtIndex:section] intValue]==0)
        button.selected=NO;
    else button.selected=YES;
    if([[dictForRows valueForKey:[NSString stringWithFormat:@"%d",section]] intValue]==0) 
        button.selected=YES;
    else 
        button.selected=NO;
        }  
    [headerView addSubview:button];
    [headerView addSubview:backButton];
    [headerView addSubview:textHeader];
	return  headerView;
    }
    else if(tableView == table1)
    {
        return NO;
    }
   
}
-(IBAction)getSection:(id)sender{
    UIButton *button=(UIButton *)sender;
	tagbtn=button.tag;
    sectionOUt=tagbtn-1;
    NSLog(@"%d",sectionOUt);
    //index=indexPath.row;
}
- (NSArray*)indexPathsInSection:(NSInteger)section 
{
	NSMutableArray *paths = [NSMutableArray array];
	NSInteger row1;	
	for ( row1 = 0; row1 < [table2 numberOfRowsInSection:section]; row1++ ) {
		[paths addObject:[NSIndexPath indexPathForRow:row1 inSection:section]];
	}
	return [NSArray arrayWithArray:paths];
}
-(IBAction)buttonClicked:(id)sender
{
	
    
    
    
    UIButton *button=(UIButton *)sender;
    
	tagbtn=button.tag;
	int b = [[arr_tag objectAtIndex:(tagbtn-1)] intValue];
	if(b == 0)
		[arr_tag replaceObjectAtIndex:(tagbtn-1) withObject:[NSString stringWithFormat:@"%d",1]];
	else {
		[arr_tag replaceObjectAtIndex:(tagbtn-1) withObject:[NSString stringWithFormat:@"%d",0]];
        
	}
    
    //   if(FlagClick==0)
    //	{
    //		FlagClick=1;
    //	}
    //    else
    //	{
    //		FlagClick=0;
    //	}
	[table2 reloadData];
    
}


#pragma mark tableMethods

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView

{
	if (tableView==table1)
	{
		return 1;
	}
	else if(tableView == table2)
	{
        NSLog(@"%d",[arrayOfSection count]);
        return [arrayOfSection count];

	}
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
	if(tableView==table1)
	{
       // [self JSON];

        int count;
        if(personal_data == TRUE)
		{
			count=[personal_array count];
             if(self.editing) count++;
		}
		else if(family_data ==TRUE)
		{
			count= [family_array count];
             if(self.editing) count++;
		}
		else if(health_data == TRUE)
		{
            count=[health_array count];
             if(self.editing) count++;
		}
		else if(finance_data ==TRUE)
		{
			count =[finance_array count];
             if(self.editing) count++;
		}
		else if(work_data == TRUE)
		{
			count= [work_array count];
             if(self.editing) count++;
		}
        else if(share_data == TRUE)
		{
			count= [share_array count];
            if(self.editing) count++;
		}
        else if(urgent_data == TRUE)
		{
			count= [urgent_array count];
            if(self.editing) count++;
		}
        else if(shopping_data == TRUE)
		{
			count= [shop_array count];
            if(self.editing) count++;
		}
		else
		{
		count= [work_array count];
             if(self.editing) count++;
		}
        
       // return [array_demo count];
        return count;
	}
	else if(tableView == table2)
	{
		int a,b;
        NSLog(@"%@",arr_tag);
        if(![arr_tag count]==0)
		b = [[arr_tag objectAtIndex:section] intValue];
		if(b==1)
			a=0;
		else
        {
			NSString *rowsno=[dictForRows valueForKey:[NSString stringWithFormat:@"%d",section]];
			a=[rowsno intValue];
			
		}
        return a;
        
	}
}



- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
	NSString *cellid=@"cell";
	UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellid];
    
	if(tableView == table1)
	{
        NSString *cellid=@"cell";
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellid];
        [[NSBundle mainBundle] loadNibNamed:@"CategoryCustomCell" owner:self options:nil];
        cell=self.category_cell;
        self.category_cell=nil;

	// Set up the cell...
        
        int count = 0;
        if(self.editing && indexPath.row != 0)
            count = 1;
		if(personal_data == TRUE)
		{
            
            if(indexPath.row == ([personal_array count]) && self.editing){
                
                return cell;
            }
            txt_category.text=[personal_array objectAtIndex:indexPath.row];

            
		}
		else if (family_data == TRUE)
		{
            if(indexPath.row == ([family_array count]) && self.editing){
                //cell.textLabel.text = @"Add Data";
                return cell;
            }
            txt_category.text=[family_array objectAtIndex:indexPath.row];

		}
		else if(health_data ==TRUE)
		{
            if(indexPath.row == ([health_array count]) && self.editing){
                //cell.textLabel.text = @"Add Data";
                return cell;
            }
            txt_category.text=[health_array objectAtIndex:indexPath.row];

		}
		else if(finance_data ==TRUE)
		{
            if(indexPath.row == ([finance_array count]) && self.editing){
                //cell.textLabel.text = @"Add Data";
                return cell;
            }
            txt_category.text=[finance_array objectAtIndex:indexPath.row];

		}
		else if(work_data ==TRUE)
		{

            if(indexPath.row == ([work_array count]) && self.editing){
                
                return cell;
            }
            txt_category.text=[work_array objectAtIndex:indexPath.row];

		}
        else if(share_data ==TRUE)
		{
            
            if(indexPath.row == ([share_array count]) && self.editing){
                
                return cell;
            }
            txt_category.text=[share_array objectAtIndex:indexPath.row];
            
		}
        
        else if(urgent_data ==TRUE)
		{
            
            if(indexPath.row == ([urgent_array count]) && self.editing){
                
                return cell;
            }
            txt_category.text=[urgent_array objectAtIndex:indexPath.row];
            
		}
        
        else if(shopping_data ==TRUE)
		{
            
            if(indexPath.row == ([shop_array count]) && self.editing){
                
                return cell;
            }
            txt_category.text=[shop_array objectAtIndex:indexPath.row];
            
		}


		else
		{
            if(indexPath.row == ([work_array count]) && self.editing){
                //cell.textLabel.text = @"Add Data";
                return cell;
            }
            txt_category.text=[work_array objectAtIndex:indexPath.row];

		}		
		
		
       
        
		        
        //	cell.textLabel.text = [dataList objectAtIndex:indexPath.row];
        return cell;
    

	}
	
	
	else if(tableView == table2)
	{
		UITapGestureRecognizer *doubleTap = 
		[[UITapGestureRecognizer alloc]
		 initWithTarget:self 
		 action:@selector(tapDetected:)];
		doubleTap.numberOfTapsRequired = 2;
		[table2 addGestureRecognizer:doubleTap];
		[doubleTap release];
		        [[NSBundle mainBundle] loadNibNamed:@"CustomCell" owner:self options:nil];
        cell=self.tbl2Cell;
        self.tbl2Cell=nil;
        txt.text=[dic_txt valueForKey:[NSString stringWithFormat:@"%d^%d",indexPath.section,indexPath.row]];
        
        txt.tag=[[NSString stringWithFormat:@"%d%d",indexPath.section,indexPath.row ] intValue];
        
        
		NSData *data=[dic_image valueForKey:[NSString stringWithFormat:@"%d%d",indexPath.row,indexPath.section]];
        UIImage* image = [UIImage imageWithData:data];
        
        [statusBtn setImage:image forState:UIControlStateNormal];
        
        
		NSData *data_priority=[dic_priorityimage valueForKey:[NSString stringWithFormat:@"%d%d",indexPath.row,indexPath.section]];
        UIImage* image_priority = [UIImage imageWithData:data_priority];
        
        [priorityBtn setImage:image_priority forState:UIControlStateNormal];

        
	    return cell;

//		
	}
//
	
	
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath 
{
	if(tableView == table1)
	{
        str_scid=[arr2 objectAtIndex:indexPath.row];
        
        NSLog(@"%@",str_scid);
        [self JSON_maintaskRetrive];
        
	}
	if(tableView == table2)
	{
        sectionOUt=indexPath.section;
        index=indexPath.row;
        

	}
}
- (UITableViewCellEditingStyle)tableView:(UITableView *)aTableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (self.editing == NO || !indexPath) return UITableViewCellEditingStyleNone;
//    if (self.editing && indexPath.row == ([array_demo count])) {
//		return UITableViewCellEditingStyleInsert;
//	} else {
//		return UITableViewCellEditingStyleDelete;
//	}

    if(work_data == TRUE)
    {
    if (self.editing && indexPath.row == ([work_array count])) {
		return UITableViewCellEditingStyleInsert;
	} else {
		return UITableViewCellEditingStyleDelete;
	}
    }
    else if(personal_data == TRUE)
    {
        if (self.editing && indexPath.row == ([personal_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }
    else if(family_data == TRUE)
    {
        if (self.editing && indexPath.row == ([family_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }

    else if(health_data == TRUE)
    {
        if (self.editing && indexPath.row == ([health_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }
    else if(finance_data == TRUE)
    {
        if (self.editing && indexPath.row == ([finance_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }

    else if(share_data == TRUE)
    {
        if (self.editing && indexPath.row == ([share_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }

    else if(urgent_data == TRUE)
    {
        if (self.editing && indexPath.row == ([urgent_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }

    else if(shopping_data == TRUE)
    {
        if (self.editing && indexPath.row == ([shop_array count])) {
            return UITableViewCellEditingStyleInsert;
        } else {
            return UITableViewCellEditingStyleDelete;
        }
    }

    return UITableViewCellEditingStyleNone;
}


- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    if(tableView == table1)
	{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        deleteFlag=TRUE;
        // Delete the row from the data source.
		if(work_data ==TRUE)
		{
            str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
            insertFlag=FALSE;
			//[work_array removeObjectAtIndex:indexPath.row];
			//[table1 reloadData];
		}
		else if(personal_data == TRUE)
		{
            str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];

		}
		
		else if(family_data == TRUE)
		{
            str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
		else if(health_data == TRUE)
		{
			str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
		else if(finance_data == TRUE)
		{
			str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
        else if(share_data == TRUE)
		{
			str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
        else if(urgent_data == TRUE)
		{
			str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
        else if(shopping_data == TRUE)
		{
			str_scid=[arr2 objectAtIndex:indexPath.row];
            [self JSON_deletecategory];
		}
        
//		
//		
//		
       // [array_demo removeObjectAtIndex:indexPath.row];
       // [table1 reloadData];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert)
	{
        deleteFlag = FALSE;
		if(work_data ==TRUE)
		{
			//[work_array insertObject:@"" atIndex:[work_array count]];
			//[table1 reloadData];
            [self JSON_insertcategory];
           // [table1 reloadData];
		}
		else if(personal_data == TRUE)
		{
            [self JSON_insertcategory];


		}
		
		else if(family_data == TRUE)
		{
            [self JSON_insertcategory];


		}
		else if(health_data == TRUE)
		{
            [self JSON_insertcategory];
		}
		else if(finance_data == TRUE)
		{
            [self JSON_insertcategory];

		}
        else if(share_data == TRUE)
		{
            [self JSON_insertcategory];
            
		}
        else if(urgent_data == TRUE)
		{
            [self JSON_insertcategory];
            
		}
        else if(shopping_data == TRUE)
		{
            [self JSON_insertcategory];
            
		}
		
            

     //   [array_demo insertObject:@"" atIndex:[array_demo count]];
     //   [table1 reloadData];
	}
	}
}

-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath 
{
	return YES;
}
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath;
{
	if(tableView ==table1)
	{
		if(work_data == TRUE)
		{
			NSString *item = [[work_array objectAtIndex:sourceIndexPath.row] retain];
			[work_array removeObject:item];
			[work_array insertObject:item atIndex:destinationIndexPath.row];
			[item release];
		}
		if(personal_data == TRUE)
		{
			NSString *item = [[personal_array objectAtIndex:sourceIndexPath.row] retain];
			[personal_array removeObject:item];
			[personal_array insertObject:item atIndex:destinationIndexPath.row];
			[item release];
		}
		if(family_data ==TRUE)
		{
			NSString *item = [[family_array objectAtIndex:sourceIndexPath.row] retain];
			[family_array removeObject:item];
			[family_array insertObject:item atIndex:destinationIndexPath.row];
			[item release];
		}
		if(health_data ==TRUE)
		{
			NSString *item = [[health_array objectAtIndex:sourceIndexPath.row] retain];
			[health_array removeObject:item];
			[health_array insertObject:item atIndex:destinationIndexPath.row];
			[item release];
		}
		if(finance_data == TRUE)
		{
			NSString *item = [[finance_array objectAtIndex:sourceIndexPath.row] retain];
			[finance_array removeObject:item];
			[finance_array insertObject:item atIndex:destinationIndexPath.row];
			[item release];
		}
	}
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    return YES;
}

#pragma mark memory dealloc

// Override to allow orientations other than the default portrait orientation.

- (void)didReceiveMemoryWarning {
	// Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
	
	// Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
	// Release any retained subviews of the main view.
	// e.g. self.myOutlet = nil;
}
- (void)dealloc {
	
	if (feedPostId != nil) {
		[feedPostId release];
	}
	[fbGraph release];
    [super dealloc];
}


@end
